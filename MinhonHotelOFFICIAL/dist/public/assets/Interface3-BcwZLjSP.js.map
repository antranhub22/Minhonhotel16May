{"version":3,"file":"Interface3-BcwZLjSP.js","sources":["../../../client/src/assets/hotel-exterior.jpeg","../../../client/src/lib/summaryParser.ts","../../../client/src/components/Interface3.tsx"],"sourcesContent":["export default \"__VITE_ASSET__CALggW3z__\"","/**\n * Utility to extract service details from AI-generated summary\n */\n\nimport { OrderSummary, OrderItem } from '@/types';\n\n/**\n * Defines regex patterns to extract service information from summary text\n */\nconst PATTERNS = {\n  // Enhanced room number detection with multiple formats\n  roomNumber: /(?:room(?:\\s+number)?|room|phòng)(?:\\s*[:#\\-]?\\s*)([0-9]{1,4}[A-Za-z]?)|(?:staying in|in room|in phòng|phòng số)(?:\\s+)([0-9]{1,4}[A-Za-z]?)/i,\n  // General service categories with their detection patterns\n  food: /food|beverage|breakfast|lunch|dinner|meal|drink|snack|restaurant/i,\n  housekeeping: /housekeeping|cleaning|towel|cleaning\\s*service|laundry/i,\n  roomService: /room\\s*service/i,\n  spa: /spa|massage|wellness|treatment/i,\n  transportation: /transportation|taxi|car|shuttle|airport\\s*transfer/i,\n  \n  // Additional service categories\n  tours: /tour|sightseeing|excursion|attraction|visit|activity/i,\n  technical: /wifi|internet|tv|television|remote|device|technical|connection/i,\n  concierge: /reservation|booking|restaurant|ticket|arrangement|concierge/i,\n  wellness: /gym|fitness|exercise|yoga|swimming|pool|sauna/i,\n  security: /safe|security|lost|found|key|card|lock|emergency/i,\n  specialOccasion: /birthday|anniversary|celebration|honeymoon|proposal|wedding|special occasion/i,\n  \n  // Support categories\n  wifi: /wifi|internet|connection|password/i,\n  checkIn: /check\\s*-?\\s*in|registration/i,\n  checkOut: /check\\s*-?\\s*out|departure/i,\n  information: /information|hotel\\s*info|facilities|amenities/i,\n  feedback: /feedback|suggestion|complaint|comment/i,\n  support: /support|help|assistance|issue/i,\n  \n  // Other category - will be used for unmatched requests\n  other: /currency\\s*exchange|money\\s*change|exchange\\s*money|foreign\\s*currency|bus\\s*ticket|train\\s*ticket|sell|purchase|buy/i,\n  \n  deliveryTime: {\n    asap: /as\\s*soon\\s*as\\s*possible|right\\s*away|immediately|asap/i,\n    thirtyMin: /30\\s*min|half\\s*an\\s*hour|30\\s*minutes/i,\n    oneHour: /(?:1|one)\\s*hour|60\\s*minutes/i,\n    specific: /specific\\s*time|scheduled|later|tomorrow|tonight|afternoon|evening|morning/i,\n  },\n  specialInstructions: /special(?:\\s+instructions?|(?:\\s+notes?)|(?:\\s+requests?))(?:\\s*:)?\\s*([^\\.]+)/i,\n  items: /(?:ordered|requested|asked for|items|item)(?:\\s*:)?\\s*([^\\.]+)/i,\n  totalAmount: /(?:total(?:\\s+amount)?|cost|price|charge)(?:\\s*:)?\\s*\\$?\\s*([0-9]+(?:\\.[0-9]{1,2})?)/i,\n};\n\n/**\n * Service category mapping from detected keywords to form values\n */\nconst serviceCategoryMapping: Record<string, string> = {\n  roomService: 'room-service',\n  food: 'food-beverage',\n  housekeeping: 'housekeeping',\n  transportation: 'transportation',\n  spa: 'spa',\n  tours: 'tours-activities',\n  technical: 'technical-support',\n  concierge: 'concierge',\n  wellness: 'wellness-fitness',\n  security: 'security',\n  specialOccasion: 'special-occasions',\n  \n  // Support categories\n  wifi: 'wifi-faq',\n  checkIn: 'check-in-out',\n  checkOut: 'check-in-out',\n  information: 'hotel-info',\n  tourism: 'attractions',\n  feedback: 'feedback',\n  support: 'support',\n  \n  // Category for miscellaneous services\n  other: 'other'\n};\n\n/**\n * Extract room number from summary text\n */\nexport function extractRoomNumber(summary: string): string | null {\n  const match = summary.match(PATTERNS.roomNumber);\n  \n  // If we got a match, check which capturing group has the value\n  if (match) {\n    // The regex has two capturing groups, we need to check which one matched\n    return match[1] || match[2] || null;\n  }\n  \n  // Also try to find room numbers in \"details\" or \"room number\" sections\n  const roomDetails = summary.match(/(?:room details|room number|phòng số)(?:\\s*[:#\\-]?\\s*)([0-9]{1,4}[A-Za-z]?)/i);\n  if (roomDetails && roomDetails[1]) {\n    return roomDetails[1];\n  }\n  \n  // Extract room number from specific details format\n  const detailsMatch = summary.match(/(?:details[\\s\\S]*?room(?:\\s+number)?[\\s\\S]*?)([0-9]{1,4}[A-Za-z]?)/i);\n  if (detailsMatch && detailsMatch[1]) {\n    return detailsMatch[1];\n  }\n  \n  return null;\n}\n\n/**\n * Determine ALL service categories mentioned in the summary text\n */\nfunction determineOrderTypes(summary: string): string[] {\n  // Initialize an empty array to hold all matching service types\n  const serviceTypes: string[] = [];\n  \n  // Check for each service type pattern and add to the array if found\n  if (PATTERNS.food.test(summary)) serviceTypes.push('food');\n  if (PATTERNS.housekeeping.test(summary)) serviceTypes.push('housekeeping');\n  if (PATTERNS.transportation.test(summary)) serviceTypes.push('transportation');\n  if (PATTERNS.roomService.test(summary)) serviceTypes.push('roomService');\n  if (PATTERNS.spa.test(summary)) serviceTypes.push('spa');\n  if (PATTERNS.tours.test(summary)) serviceTypes.push('tours');\n  if (PATTERNS.technical.test(summary)) serviceTypes.push('technical');\n  if (PATTERNS.concierge.test(summary)) serviceTypes.push('concierge');\n  if (PATTERNS.wellness.test(summary)) serviceTypes.push('wellness');\n  if (PATTERNS.security.test(summary)) serviceTypes.push('security');\n  if (PATTERNS.specialOccasion.test(summary)) serviceTypes.push('specialOccasion');\n  if (PATTERNS.other.test(summary)) serviceTypes.push('other');\n  \n  // Map the detected types to form values\n  const mappedTypes = serviceTypes.map(type => \n    serviceCategoryMapping[type] || 'other'\n  );\n  \n  // Default to \"other\" if nothing matches\n  return mappedTypes.length > 0 ? mappedTypes : ['other'];\n}\n\n/**\n * Combine multiple service types into a single string representation\n */\nfunction determineOrderType(summary: string): string {\n  const types = determineOrderTypes(summary);\n  return types.join(',');\n}\n\n/**\n * Determine delivery time preference based on summary text\n */\nfunction determineDeliveryTime(summary: string): 'asap' | '30min' | '1hour' | 'specific' {\n  if (PATTERNS.deliveryTime.asap.test(summary)) return 'asap';\n  if (PATTERNS.deliveryTime.thirtyMin.test(summary)) return '30min';\n  if (PATTERNS.deliveryTime.oneHour.test(summary)) return '1hour';\n  if (PATTERNS.deliveryTime.specific.test(summary)) return 'specific';\n  \n  // Default to ASAP if no match found\n  return 'asap';\n}\n\n/**\n * Extract special instructions from summary text\n */\nfunction extractSpecialInstructions(summary: string): string {\n  const match = summary.match(PATTERNS.specialInstructions);\n  return match ? match[1].trim() : '';\n}\n\n/**\n * Extract requested items from summary text and attempt to generate price estimates\n */\nfunction extractItems(summary: string): OrderItem[] {\n  const match = summary.match(PATTERNS.items);\n  let allItems: OrderItem[] = [];\n  \n  // First look for bulleted items (most reliable format from AI)\n  const bulletItems = summary.match(/(?:^|\\n)[-•*]\\s*([^\\n]+)/g);\n  if (bulletItems && bulletItems.length > 0) {\n    const parsedItems = bulletItems.map((item, index) => {\n      // Remove the bullet and trim\n      const cleanItem = item.replace(/^[-•*]\\s*/, '').trim();\n      return createOrderItem(cleanItem, index);\n    }).filter(item => item.name.length > 0);\n    \n    allItems = [...allItems, ...parsedItems];\n  }\n  \n  // Look for request patterns to find all requests in the summary\n  {\n    const requestItems = summary.match(/(?:requested|asked for|ordered|booking|reservation for|inquired about)\\s+([^\\.;]+)/gi);\n    if (requestItems && requestItems.length > 0) {\n      const parsedItems = requestItems.map((item, index) => {\n        // Remove the request prefix\n        const cleanItem = item.replace(/(?:requested|asked for|ordered|booking|reservation for|inquired about)\\s+/i, '').trim();\n        return createOrderItem(cleanItem, index);\n      }).filter(item => item.name.length > 0);\n      \n      allItems = [...allItems, ...parsedItems];\n    }\n  }\n  \n  // Use the explicit items section if we found one\n  if (match) {\n    const itemsText = match[1];\n    // Split by commas, \"and\", or other common separators\n    const itemList = itemsText.split(/(?:,\\s*|\\s+and\\s+|\\s*&\\s*|\\s*\\+\\s*)/);\n    \n    // Convert text items to OrderItem objects with default values\n    const parsedItems = itemList.map((item, index) => createOrderItem(item, index))\n      .filter(item => item.name.length > 0);\n      \n    allItems = [...allItems, ...parsedItems];\n  }\n  \n  // Final fallback: Split the entire summary by sentences and look for potential requests\n  if (allItems.length === 0) {\n    const sentences = summary.split(/\\.(?:\\s|$)/);\n    for (let i = 0; i < sentences.length; i++) {\n      const sentence = sentences[i].trim();\n      // Only process sentences that look like they might contain a request\n      if (sentence.toLowerCase().includes('request') || \n          sentence.toLowerCase().includes('book') || \n          sentence.toLowerCase().includes('order') ||\n          sentence.toLowerCase().includes('exchange') ||\n          sentence.toLowerCase().includes('inquired')) {\n        allItems.push(createOrderItem(sentence, allItems.length));\n      }\n    }\n  }\n  \n  // Remove duplicates and similar items by comparing names\n  const uniqueItems: OrderItem[] = [];\n  const nameMap = new Map<string, boolean>();\n  \n  for (const item of allItems) {\n    // Normalize name for comparison (lowercase, remove extra spaces)\n    const normalizedName = item.name.toLowerCase().replace(/\\s+/g, ' ').trim();\n    \n    // Check if we already have a very similar item\n    let isDuplicate = false;\n    // Convert Map entries to array and then iterate\n    const existingNames = Array.from(nameMap.keys());\n    for (const existingName of existingNames) {\n      // If names are 80% similar or more, consider them duplicates\n      if (stringSimilarity(normalizedName, existingName) > 0.8) {\n        isDuplicate = true;\n        break;\n      }\n    }\n    \n    // Add to unique items if not a duplicate\n    if (!isDuplicate) {\n      nameMap.set(normalizedName, true);\n      uniqueItems.push(item);\n    }\n  }\n  \n  // Ensure we have unique item IDs\n  return uniqueItems.map((item, index) => ({\n    ...item,\n    id: (index + 1).toString()\n  }));\n}\n\n/**\n * Calculates string similarity between 0 and 1\n * Higher values mean strings are more similar\n */\nfunction stringSimilarity(str1: string, str2: string): number {\n  if (str1 === str2) return 1.0;\n  if (str1.length === 0 || str2.length === 0) return 0.0;\n  \n  // Get longest common substring\n  const longer = str1.length > str2.length ? str1 : str2;\n  const shorter = str1.length > str2.length ? str2 : str1;\n  \n  // Check if the shorter string appears in the longer one\n  if (longer.includes(shorter)) {\n    return shorter.length / longer.length;\n  }\n  \n  // Count matching characters\n  let matches = 0;\n  for (let i = 0; i < shorter.length; i++) {\n    if (longer.includes(shorter[i])) {\n      matches++;\n    }\n  }\n  \n  return matches / longer.length;\n}\n\n/**\n * Helper function to create an OrderItem from text\n */\nfunction createOrderItem(itemText: string, index: number): OrderItem {\n  const trimmedItem = itemText.trim()\n    .replace(/^[-•*]\\s+/, '') // Remove bullet point if present\n    .replace(/^- /, ''); // Remove dash if present\n  \n  // Try to extract quantity if it's at the start of the item (e.g., \"2 towels\")\n  const quantityMatch = trimmedItem.match(/^([0-9]+)\\s+(.+)$/);\n  const quantity = quantityMatch ? parseInt(quantityMatch[1]) : 1;\n  const name = quantityMatch ? quantityMatch[2] : trimmedItem;\n  \n  // Generate a more descriptive content for the details field\n  let description = '';\n  \n  // Check for date-related details\n  const dateMatch = trimmedItem.match(/(?:on|for)\\s+((?:January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+\\d{1,2}(?:st|nd|rd|th)?(?:,?\\s+\\d{4})?|\\d{1,2}\\/\\d{1,2}(?:\\/\\d{2,4})?)/i);\n  const dateInfo = dateMatch ? `Date: ${dateMatch[1]}` : '';\n  \n  // Check for people/quantity information\n  const peopleMatch = trimmedItem.match(/(\\d+)\\s+(?:people|person|pax|guest|adult|child|passenger)/i);\n  const peopleInfo = peopleMatch ? `Guests: ${peopleMatch[1]} people` : '';\n  \n  // Check for location/destination information\n  const locationMatch = trimmedItem.match(/(?:to|in|at|for)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*|[A-Z][A-Z]+|[A-Z][a-z]+)/);\n  const locationInfo = locationMatch ? `Location: ${locationMatch[1]}` : '';\n  \n  // Check for time information\n  const timeMatch = trimmedItem.match(/(?:at|from)\\s+(\\d{1,2}(?::\\d{2})?\\s*(?:AM|PM|am|pm))/i);\n  const timeInfo = timeMatch ? `Time: ${timeMatch[1]}` : '';\n  \n  // Check for price or amount information\n  const amountMatch = trimmedItem.match(/(\\d+(?:,\\d+)*(?:\\.\\d+)?)\\s*(?:USD|US dollars|\\$|VND|dong)/i);\n  const amountInfo = amountMatch ? `Amount: ${amountMatch[1]} ${amountMatch[0].includes('USD') || amountMatch[0].includes('US') || amountMatch[0].includes('$') ? 'USD' : 'VND'}` : '';\n  \n  // Combine the detailed information with line breaks\n  const detailParts = [dateInfo, peopleInfo, locationInfo, timeInfo, amountInfo].filter(part => part.length > 0);\n  \n  // If we extracted specific details, use them; otherwise use a generic description\n  if (detailParts.length > 0) {\n    description = detailParts.join('\\n');\n  } else {\n    description = `Details for ${name.charAt(0).toLowerCase() + name.slice(1)}`;\n  }\n  \n  return {\n    id: (index + 1).toString(),\n    name: name.charAt(0).toUpperCase() + name.slice(1), // Capitalize first letter\n    description,\n    quantity,\n    price: estimatePrice(name), // Assign a reasonable default price\n  };\n}\n\n/**\n * Simple price estimation based on item type\n */\nfunction estimatePrice(itemName: string): number {\n  const lowerItem = itemName.toLowerCase();\n  \n  // Food items\n  if (/sandwich|burger|pasta|steak|fish|chicken|breakfast|lunch|dinner/.test(lowerItem)) {\n    return 15.00;\n  }\n  \n  // Beverages\n  if (/coffee|tea|juice|water|soda|wine|beer|cocktail|drink/.test(lowerItem)) {\n    return 8.00;\n  }\n  \n  // Room supplies\n  if (/towel|soap|shampoo|toothbrush|toothpaste|amenities/.test(lowerItem)) {\n    return 5.00;\n  }\n  \n  // Services\n  if (/cleaning|housekeeping|laundry|ironing/.test(lowerItem)) {\n    return 20.00;\n  }\n  \n  // Transport\n  if (/taxi|car|shuttle|transfer/.test(lowerItem)) {\n    return 30.00;\n  }\n  \n  // Default price for other items\n  return 10.00;\n}\n\n/**\n * Extract total amount from summary text\n */\nfunction extractTotalAmount(summary: string, items: OrderItem[]): number {\n  const match = summary.match(PATTERNS.totalAmount);\n  \n  if (match) {\n    return parseFloat(match[1]);\n  }\n  \n  // If no total found, calculate from items\n  return items.reduce((total, item) => total + (item.price * item.quantity), 0);\n}\n\n/**\n * Main function to parse AI summary and extract order details\n * Returns an OrderSummary object with extracted information\n */\nexport function parseSummaryToOrderDetails(summary: string): Partial<OrderSummary> {\n  if (!summary) return {};\n  \n  // Extract individual components\n  const roomNumber = extractRoomNumber(summary) || '';\n  const orderType = determineOrderType(summary);\n  const deliveryTime = determineDeliveryTime(summary);\n  const specialInstructions = extractSpecialInstructions(summary);\n  const items = extractItems(summary);\n  const totalAmount = extractTotalAmount(summary, items);\n  \n  return {\n    roomNumber,\n    orderType,\n    deliveryTime,\n    guestName: '',\n    guestEmail: '',\n    guestPhone: '',\n    specialInstructions,\n    items,\n    totalAmount\n  };\n}","import React, { useEffect, useState } from 'react';\nimport { useAssistant } from '@/context/AssistantContext';\nimport { ServiceRequest } from '@/types';\nimport hotelImage from '../assets/hotel-exterior.jpeg';\nimport InfographicSteps from './InfographicSteps';\nimport { parseSummaryToOrderDetails, extractRoomNumber } from '@/lib/summaryParser';\nimport { t } from '@/i18n';\n\ninterface Interface3Props {\n  isActive: boolean;\n}\n\nconst Interface3: React.FC<Interface3Props> = ({ isActive }) => {\n  const { \n    orderSummary, \n    setOrderSummary, \n    setCurrentInterface,\n    setOrder,\n    callSummary,\n    setCallSummary,\n    serviceRequests,\n    callDuration,\n    callDetails,\n    emailSentForCurrentSession,\n    setEmailSentForCurrentSession,\n    addActiveOrder,\n    translateToVietnamese,\n    language\n  } = useAssistant();\n  \n  // Local state for grouping service requests by type\n  const [groupedRequests, setGroupedRequests] = useState<Record<string, ServiceRequest[]>>({});\n  // State for user-provided additional notes\n  const [note, setNote] = useState('');\n  \n  // Handle input changes\n  const handleInputChange = (field: string, value: string) => {\n    if (!orderSummary) return;\n    \n    setOrderSummary({\n      ...orderSummary,\n      [field]: value\n    });\n  };\n  \n  // Handle item removal\n  const handleRemoveItem = (itemId: string) => {\n    if (!orderSummary) return;\n    \n    const updatedItems = orderSummary.items.filter(item => item.id !== itemId);\n    const newTotalAmount = updatedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n    \n    setOrderSummary({\n      ...orderSummary,\n      items: updatedItems,\n      totalAmount: newTotalAmount\n    });\n  };\n  \n  // Group service requests by type for better organization\n  useEffect(() => {\n    if (serviceRequests && serviceRequests.length > 0) {\n      // Group the requests by service type\n      const grouped = serviceRequests.reduce((acc, request) => {\n        const type = request.serviceType;\n        if (!acc[type]) acc[type] = [];\n        acc[type].push(request);\n        return acc;\n      }, {} as Record<string, ServiceRequest[]>);\n      \n      setGroupedRequests(grouped);\n      \n      // Generate OrderItems based on service requests\n      if (orderSummary && (!orderSummary.items || orderSummary.items.length === 0)) {\n        // Create items from service requests\n        const newItems = serviceRequests.map((request, index) => {\n          // Determine appropriate quantity based on details\n          let quantity = 1;\n          \n          // Look for specific quantities in the request text or details\n          const details = request.details || {};\n          const quantityMatch = request.requestText.match(/(\\d+)\\s+(towels|bottles|pieces|cups|glasses|plates|servings|items)/i);\n          if (quantityMatch) {\n            quantity = parseInt(quantityMatch[1]);\n          } else if (typeof details.people === 'number') {\n            // For tours, transportation, use people count as quantity reference\n            quantity = details.people;\n          }\n          \n          // Calculate appropriate price based on service type\n          let price = 10; // Default price\n          if (request.serviceType === 'room-service') price = 15;\n          else if (request.serviceType === 'housekeeping') price = 8;\n          else if (request.serviceType === 'transportation') price = 25;\n          else if (request.serviceType === 'tours-activities') price = 35;\n          else if (request.serviceType === 'spa') price = 30;\n          \n          return {\n            id: `item-${index}`,\n            name: request.serviceType,\n            description: request.requestText,\n            quantity,\n            price\n          };\n        });\n\n        // Update order summary with new items\n        setOrderSummary({\n          ...orderSummary,\n          items: newItems,\n          totalAmount: newItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n        });\n      }\n    }\n  }, [serviceRequests, orderSummary, setOrderSummary]);\n  \n  // Helper function to get readable service name from service type\n  const getServiceName = (serviceType: string): string => {\n    const typeMap: Record<string, string> = {\n      'room-service': t('room_service', language),\n      'housekeeping': t('housekeeping', language),\n      'wake-up': t('wake_up_call', language),\n      'amenities': t('additional_amenities', language),\n      'restaurant': t('restaurant_reservation', language),\n      'spa': t('spa_appointment', language),\n      'transportation': t('transportation', language),\n      'attractions': t('local_attractions', language),\n      'tours-activities': t('tours_activities', language),\n      'technical-support': t('technical_support', language),\n      'concierge': t('concierge_services', language),\n      'wellness-fitness': t('wellness_fitness', language),\n      'security': t('security_assistance', language),\n      'special-occasions': t('special_occasion', language),\n      'other': t('other_service', language)\n    };\n    \n    return typeMap[serviceType] || serviceType.split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n  \n  // Legacy function to analyze call summary and prepare request items\n  useEffect(() => {\n    if (isActive && callSummary && orderSummary) {\n      // Extract requests from summary content\n      const content = callSummary.content;\n\n      // Luôn cập nhật số phòng nếu phát hiện được\n      const detectedRoomNumber = extractRoomNumber(content);\n      if (detectedRoomNumber && detectedRoomNumber !== orderSummary.roomNumber) {\n        setOrderSummary({\n          ...orderSummary,\n          roomNumber: detectedRoomNumber\n        });\n      }\n\n      // Phần còn lại giữ nguyên logic cũ cho items\n      if (!serviceRequests || serviceRequests.length === 0) {\n        // Try to find \"List of Requests:\" section and extract individual requests\n        const requestsMatch = content.match(/List of Requests:([\\s\\S]*?)(?:\\n\\nSpecial Instructions|\\n\\nThe conversation)/);\n        if (requestsMatch) {\n          const requestsSection = requestsMatch[1];\n          const requestRegex = /Request (\\d+): ([^\\n]+)/g;\n          \n          let match;\n          const newItems = [];\n          let id = 1;\n          \n          // Extract all detected service requests\n          while ((match = requestRegex.exec(requestsSection)) !== null) {\n            const requestType = match[2].trim();\n            const requestIndex = match.index;\n            const endIndex = requestsSection.indexOf(`Request ${parseInt(match[1]) + 1}:`, requestIndex);\n            \n            // Extract the details section for this request\n            const detailsSection = endIndex > -1 \n              ? requestsSection.substring(requestIndex, endIndex)\n              : requestsSection.substring(requestIndex);\n            \n            // Parse specific details\n            const detailsRegex = /- ([^:]+): ([^\\n]+)/g;\n            let detailsMatch;\n            const details: Record<string, string> = {};\n            \n            while ((detailsMatch = detailsRegex.exec(detailsSection)) !== null) {\n              const key = detailsMatch[1].trim();\n              const value = detailsMatch[2].trim();\n              details[key.toLowerCase()] = value;\n            }\n            \n            // Construct comprehensive description including all details\n            let description = '';\n            \n            if (details['service description']) {\n              description += `${details['service description']}`;\n            }\n            \n            if (details['details']) {\n              description += description ? `. ${details['details']}` : details['details'];\n            }\n            \n            if (details['items']) {\n              description += description ? `\\nItems: ${details['items']}` : `Items: ${details['items']}`;\n            }\n            \n            if (details['service timing requested']) {\n              description += `\\nTiming: ${details['service timing requested']}`;\n            }\n            \n            if (details['destinations']) {\n              description += `\\nDestinations: ${details['destinations']}`;\n            }\n            \n            // If no details were extracted, provide a default description\n            if (!description) {\n              description = `Requested ${requestType} service`;\n            }\n            \n            newItems.push({\n              id: id.toString(),\n              name: requestType,\n              description: description,\n              quantity: 1,\n              price: 10 // Default price\n            });\n            \n            id++;\n          }\n          \n          // If we found at least one request and we don't already have items,\n          // update the orderSummary with the new items\n          if (newItems.length > 0 && (!orderSummary.items || orderSummary.items.length === 0)) {\n            // Create a comma-separated list of service types\n            const serviceTypes = newItems.map(item => {\n              // Convert service name to service type value\n              const serviceType = item.name.toLowerCase().replace(/\\s+/g, '-');\n              return serviceType;\n            }).join(',');\n            \n            // Look for room number in the summary\n            const roomNumber = extractRoomNumber(content) || orderSummary.roomNumber;\n            \n            // Look for overall timing\n            const timingMatch = content.match(/Service Timing Requested:?\\s*([^\\n]+)/i);\n            const timing = timingMatch ? timingMatch[1] : orderSummary.deliveryTime;\n            \n            // Map the timing description to our delivery time options\n            let deliveryTime = orderSummary.deliveryTime;\n            if (timing) {\n              if (/soon|immediate|urgent|right now/i.test(timing)) {\n                deliveryTime = 'asap';\n              } else if (/30 minute|half hour/i.test(timing)) {\n                deliveryTime = '30min';\n              } else if (/hour|60 minute/i.test(timing)) {\n                deliveryTime = '1hour';\n              } else if (/schedule|later|specific/i.test(timing)) {\n                deliveryTime = 'specific';\n              }\n            }\n            \n            setOrderSummary({\n              ...orderSummary,\n              items: newItems,\n              orderType: serviceTypes,\n              roomNumber: roomNumber,\n              deliveryTime: deliveryTime,\n              totalAmount: newItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n            });\n          }\n        }\n      }\n    }\n  }, [isActive, callSummary, orderSummary, setOrderSummary]);\n\n  // Handle confirm order\n  const handleConfirmOrder = async () => {\n    if (!orderSummary) return;\n    \n    // Generate a random order reference\n    const orderReference = `#ORD-${Math.floor(10000 + Math.random() * 90000)}`;\n    \n    // Derive display text for estimated delivery time based on orderSummary\n    let estimatedDisplayTime: string;\n    switch (orderSummary.deliveryTime) {\n      case 'asap':\n        estimatedDisplayTime = 'As soon as possible';\n        break;\n      case '30min':\n        estimatedDisplayTime = '30 minutes';\n        break;\n      case '1hour':\n        estimatedDisplayTime = '1 hour';\n        break;\n      default:\n        // Use custom or specific time entered by user\n        estimatedDisplayTime = orderSummary.deliveryTime || '15-20 minutes';\n    }\n    \n    // Set order data with dynamic estimatedTime\n    setOrder({\n      reference: orderReference,\n      estimatedTime: estimatedDisplayTime,\n      summary: orderSummary\n    });\n    \n    // Add to active orders for status panel\n    addActiveOrder({\n      reference: orderReference,\n      requestedAt: new Date(),\n      estimatedTime: estimatedDisplayTime,\n      status: 'Đã ghi nhận'\n    });\n    \n    // Check if email has already been sent for this session\n    if (emailSentForCurrentSession) {\n      console.log('Email already sent for this session. Skipping duplicate email sending.');\n      setCurrentInterface('interface4');\n      return;\n    }\n    \n    // Only send email from English interface if Vietnamese interface is not active\n    // This prevents duplicate emails when both components are rendered\n    const isVietnameseActive = document.querySelector('[data-interface=\"interface3vi\"]')?.getAttribute('data-active') === 'true';\n    \n    if (!isVietnameseActive) {\n      // Send email with the order summary\n      try {\n        console.log('Sending email with call summary and service requests...');\n        // Translate summary to Vietnamese for email\n        let summaryForEmail = callSummary?.content || '';\n        try {\n          summaryForEmail = await translateToVietnamese(summaryForEmail);\n        } catch (e) {\n          console.error('Failed to translate summary for email:', e);\n        }\n        // Log the translated summary so you can inspect its content\n        console.log('Translated summary for email (Vietnamese):', summaryForEmail);\n        \n        // Format call duration if available - ensure we have valid values even on mobile\n        const formattedDuration = callDuration ? \n          `${Math.floor(callDuration / 60)}:${(callDuration % 60).toString().padStart(2, '0')}` : \n          '0:00';\n          \n        console.log('Call duration for email:', formattedDuration);\n        \n        // Ensure we have a valid callId for both desktop and mobile\n        const generatedCallId = `call-${Date.now()}`;\n        const currentCallId = callDetails?.id || generatedCallId;\n        \n        console.log('Using callId for email:', currentCallId);\n        console.log('Call summary content:', callSummary?.content || 'No summary available');\n        \n        console.log('Preparing email request payload...');\n        const emailPayload = {\n          toEmail: 'tuans2@gmail.com', // Default email recipient\n          callDetails: {\n            callId: currentCallId,\n            roomNumber: orderSummary.roomNumber || 'unknown',\n            summary: summaryForEmail || 'No summary available',\n            timestamp: callSummary?.timestamp || new Date(),\n            duration: formattedDuration,\n            serviceRequests: orderSummary.items.map(item => item.name),\n            orderReference: orderReference,\n            note: note // User-provided additional notes\n          }\n        };\n        console.log('Email payload prepared:', JSON.stringify(emailPayload));\n        \n        // Use a timeout to ensure the request is properly sent on mobile\n        // Phát hiện thiết bị di động ngay từ đầu\n        const isMobile = /iPhone|iPad|iPod|Android|Mobile|webOS|BlackBerry/i.test(navigator.userAgent);\n        console.log('Device type detected:', isMobile ? 'MOBILE' : 'DESKTOP');\n            \n        setTimeout(async () => {\n          try {\n            // Chọn endpoint phù hợp với loại thiết bị\n            const endpoint = isMobile ? '/api/mobile-call-summary-email' : '/api/send-call-summary-email';\n            console.log(`Using ${isMobile ? 'mobile' : 'standard'} endpoint for email: ${endpoint}`);\n            \n            // Thêm timestamp để tránh cache trên thiết bị di động\n            const requestUrl = isMobile ? `${endpoint}?_=${Date.now()}` : endpoint;\n            \n            console.log('Sending email request to server...');\n            const response = await fetch(requestUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache, no-store, must-revalidate',\n                'Pragma': 'no-cache', \n                'Expires': '0',\n                'X-Device-Type': isMobile ? 'mobile' : 'desktop'\n              },\n              body: JSON.stringify(emailPayload),\n              cache: 'no-cache',\n              credentials: 'same-origin',\n            });\n            \n            if (!response.ok) {\n              throw new Error(`Server responded with status: ${response.status}`);\n            }\n            \n            const result = await response.json();\n            console.log('Email sent with order confirmation:', result);\n            \n            // Mark that email has been sent for this session to prevent duplicates\n            setEmailSentForCurrentSession(true);\n          } catch (innerError) {\n            console.error('Failed to send email in timeout:', innerError);\n          }\n        }, isMobile ? 50 : 500); // Giảm thời gian timeout cho thiết bị di động\n\n      } catch (error) {\n        console.error('Failed to send email:', error);\n      }\n    } else {\n      console.log('Vietnamese interface is active, skipping email send from English interface');\n    }\n    \n    // Navigate to confirmation screen\n    setCurrentInterface('interface4');\n  };\n  \n  // Function to add note to the displayed summary\n  const handleAddNote = () => {\n    if (!note.trim() || !callSummary) return;\n    setCallSummary({\n      ...callSummary,\n      content: `${callSummary.content}\\n\\nAdditional Notes:\\n${note}`\n    });\n  };\n  \n  if (!orderSummary) return null;\n  \n  return (\n    <div\n      className={`absolute w-full min-h-screen h-full transition-opacity duration-500 ${\n        isActive ? 'opacity-100' : 'opacity-0 pointer-events-none'\n      } z-30 overflow-y-auto`}\n      id=\"interface3\"\n      style={{\n        backgroundImage: `linear-gradient(rgba(85,154,154,0.7), rgba(121, 219, 220, 0.6)), url(${hotelImage.replace(/\\.(jpe?g)$/i, '.webp')})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        fontFamily: 'SF Pro Text, Roboto, Open Sans, Arial, sans-serif'\n      }}\n    >\n      <div className=\"container mx-auto flex flex-col p-2 sm:p-4 md:p-8\">\n        <div className=\"mx-auto w-full max-w-4xl bg-white/90 rounded-2xl shadow-xl p-3 sm:p-6 md:p-10 mb-4 sm:mb-6 flex-grow border border-white/40 backdrop-blur-md\" style={{minHeight: 420}}>\n          <div className=\"mb-3 sm:mb-4 pb-2 sm:pb-3 border-b border-gray-200\">\n            <p className=\"font-poppins font-bold text-xl sm:text-2xl text-blue-900 tracking-wide\">{t('order_summary', language)}</p>\n          </div>\n          <div className=\"flex flex-col md:flex-row gap-4 sm:gap-10 md:gap-16\">\n            {/* Left column: summary, notes, room number */}\n            <div className=\"md:w-3/4 w-full space-y-3 sm:space-y-4\">\n              {/* Mobile: Cancel và Send to Reception lên trên cùng */}\n              <div className=\"flex sm:hidden flex-row w-full gap-2 mb-2\">\n                <button className=\"flex-1 flex items-center justify-center px-2 py-1.5 bg-white/80 hover:bg-blue-100 text-blue-900 rounded-full text-xs font-semibold border border-white/30 shadow transition-colors\" onClick={() => setCurrentInterface('interface1')}>\n                  <span className=\"material-icons text-base mr-1\">cancel</span>{t('cancel', language)}\n                </button>\n                <button\n                  onClick={handleConfirmOrder}\n                  className=\"flex-1 bg-[#d4af37] hover:bg-[#ffd700] text-blue-900 font-bold py-1.5 px-3 rounded-full shadow-lg flex items-center justify-center space-x-2 transition-colors border border-white/30 text-xs\"\n                  style={{letterSpacing:0.5}}\n                >\n                  <span className=\"material-icons\">send</span>\n                  <span className=\"whitespace-nowrap\">{t('send_to_reception', language)}</span>\n                </button>\n              </div>\n              {/* Mobile: Add Note, Room, Vietnamese, textarea lên trên summary */}\n              <div className=\"flex flex-col gap-2 mb-2 sm:hidden\">\n                <div className=\"flex flex-row w-full gap-2\">\n                  <button className=\"h-10 px-3 bg-[#ffe082] hover:bg-[#ffe9b3] text-blue-900 rounded-full text-xs font-semibold shadow transition-colors flex-1\" onClick={handleAddNote} disabled={!note.trim()}>{t('add_note', language)}</button>\n                  <div className=\"flex items-center space-x-2 w-full justify-center\">\n                    <label className=\"text-xs text-gray-600 font-medium\">{t('room_number', language)}</label>\n                    <input type=\"text\" placeholder={t('enter_room_number', language)} className=\"w-16 p-2 border border-white/30 rounded-xl focus:ring-2 focus:ring-[#d4af37] focus:border-[#d4af37] bg-white/70 text-gray-900 font-semibold text-xs\" value={orderSummary.roomNumber} onChange={(e) => handleInputChange('roomNumber', e.target.value)} />\n                  </div>\n                  <button className=\"h-10 px-3 bg-white/70 text-blue-900 rounded-full text-xs font-semibold border border-white/30 shadow flex items-center justify-center\" onClick={() => setCurrentInterface('interface3vi')}>\n                    <span className=\"material-icons text-base\">language</span>\n                  </button>\n                </div>\n                <textarea placeholder={t('enter_notes', language)} className=\"w-full p-2 border border-white/30 rounded-xl text-xs bg-white/60 focus:bg-white/90 focus:ring-2 focus:ring-[#d4af37] transition italic font-light text-gray-500\" value={note} onChange={(e) => setNote(e.target.value)} rows={3} style={{fontFamily:'inherit'}} />\n              </div>\n              {/* AI-generated Call Summary Container */}\n              {callSummary && (\n                <div id=\"summary-container\" className=\"mb-3 sm:mb-4\">\n                  <div className=\"p-3 sm:p-5 bg-white/80 rounded-xl shadow border border-white/30 mb-3 sm:mb-4 relative\" style={{backdropFilter:'blur(2px)'}}>\n                    <h3 className=\"font-semibold text-base sm:text-lg mb-1 sm:mb-2 text-blue-800\">{t('summary', language)}</h3>\n                    <div className=\"text-sm sm:text-base leading-relaxed text-gray-800 whitespace-pre-line\" style={{fontWeight: 400}}>\n                      {/* Custom summary formatting */}\n                      {(() => {\n                        const lines = (callSummary.content || '').split('\\n');\n                        // Lọc bỏ dòng Next Step và xử lý Guest's Name\n                        return lines.filter(line => !/^Next Step:/i.test(line) && !/Please Press Send To Reception/i.test(line)).map((line, idx) => {\n                          // Loại bỏ phần (used for Guest with a confirmed reservation)\n                          if (/^Guest's Name/i.test(line)) {\n                            const cleaned = line.replace(/\\s*\\(used for Guest with a confirmed reservation\\)/i, '');\n                            return <div key={idx}><b>{cleaned}</b></div>;\n                          }\n                          if (/^Room Number:/i.test(line)) return <div key={idx}><b>{line}</b></div>;\n                          if (/^REQUEST \\d+:/i.test(line)) return <div key={idx} className=\"mt-3 mb-1\"><b>{line}</b></div>;\n                          if (/^• Service Timing:/i.test(line)) return <div key={idx} style={{marginLeft:16}}><b>{line}</b></div>;\n                          if (/^• Order Details:/i.test(line)) return <div key={idx} style={{marginLeft:16}}><b>{line}</b></div>;\n                          if (/^• Special Requirements:/i.test(line)) return <div key={idx} style={{marginLeft:16}}><b>{line}</b></div>;\n                          // Lùi dòng cho nội dung con của Order Details\n                          if (/^• [^-].+/.test(line)) return <div key={idx} style={{marginLeft:32}}>{line}</div>;\n                          if (/^\\s*[-•]/.test(line)) return <div key={idx} style={{marginLeft:32}}>{line}</div>;\n                          if (/^\\s*$/.test(line)) return <div key={idx} style={{height:8}}></div>;\n                          return <div key={idx}>{line}</div>;\n                        });\n                      })()}\n                    </div>\n                    <div className=\"mt-2 sm:mt-3 flex justify-end\">\n                      <div className=\"text-xs text-gray-500\">\n                        {t('generated_at', language)} {new Date(callSummary.timestamp).toLocaleTimeString()}\n                      </div>\n                    </div>\n                  </div>\n                  {/* Ghi chú in nghiêng dưới cùng */}\n                  <div className=\"text-center mt-2 mb-1\">\n                    <span className=\"italic text-sm\" style={{color:'#2563eb', background:'#e0f2fe', borderRadius: '6px', padding: '4px 12px', display: 'inline-block', fontWeight: 500}}>\n                      Please Press <b style={{fontWeight:700, color:'#1d4ed8'}}>Send To Reception</b> To Complete Your Request\n                    </span>\n                  </div>\n                </div>\n              )}\n              {/* Desktop: Additional Notes, Room Number, and Actions (giữ nguyên) */}\n              <div className=\"hidden sm:flex flex-row items-center gap-2 h-10\">\n                <button className=\"h-10 px-3 sm:px-4 bg-[#ffe082] hover:bg-[#ffe9b3] text-blue-900 rounded-full text-xs sm:text-sm font-semibold shadow transition-colors\" onClick={handleAddNote} disabled={!note.trim()}>{t('add_note', language)}</button>\n                <div className=\"flex items-center space-x-2 w-full justify-center\">\n                  <label className=\"text-xs sm:text-base text-gray-600 font-medium\">{t('room_number', language)}</label>\n                  <input type=\"text\" placeholder={t('enter_room_number', language)} className=\"w-16 sm:w-32 p-2 border border-white/30 rounded-xl focus:ring-2 focus:ring-[#d4af37] focus:border-[#d4af37] bg-white/70 text-gray-900 font-semibold text-xs sm:text-base\" value={orderSummary.roomNumber} onChange={(e) => handleInputChange('roomNumber', e.target.value)} />\n                </div>\n                <button className=\"h-10 px-3 sm:px-4 bg-white/70 text-blue-900 rounded-full text-xs sm:text-sm font-semibold border border-white/30 shadow flex items-center justify-center\" onClick={() => setCurrentInterface('interface3vi')}>\n                  <span className=\"material-icons text-base\">language</span>\n                </button>\n              </div>\n              <textarea placeholder={t('enter_notes', language)} className=\"hidden sm:block w-full p-2 sm:p-3 border border-white/30 rounded-xl mb-3 sm:mb-4 text-xs sm:text-sm bg-white/60 focus:bg-white/90 focus:ring-2 focus:ring-[#d4af37] transition italic font-light text-gray-500\" value={note} onChange={(e) => setNote(e.target.value)} rows={3} style={{fontFamily:'inherit'}} />\n            </div>\n            {/* Right column: control buttons at top-right (ẩn trên mobile) */}\n            <div className=\"md:w-1/4 w-full hidden sm:flex md:justify-end justify-center\">\n              <div className=\"flex flex-col items-end space-y-2 sm:space-y-3 w-full md:w-auto\">\n                <button\n                  onClick={handleConfirmOrder}\n                  className=\"w-full md:w-auto bg-[#d4af37] hover:bg-[#ffd700] text-blue-900 font-bold py-1.5 sm:py-2 px-3 sm:px-4 rounded-full shadow-lg flex items-center justify-center space-x-2 transition-colors border border-white/30 text-xs sm:text-sm\"\n                  style={{letterSpacing:0.5}}\n                >\n                  <span className=\"material-icons\">send</span>\n                  <span className=\"whitespace-nowrap\">{t('send_to_reception', language)}</span>\n                </button>\n                <button className=\"w-full md:w-auto flex items-center justify-center px-2 sm:px-3 py-1.5 bg-white/80 hover:bg-blue-100 text-blue-900 rounded-full text-xs font-semibold border border-white/30 shadow transition-colors\" onClick={() => setCurrentInterface('interface1')}>\n                  <span className=\"material-icons text-base mr-1\">cancel</span>{t('cancel', language)}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Interface3;\n"],"names":["hotelImage","PATTERNS","extractRoomNumber","summary","match","roomDetails","detailsMatch","Interface3","isActive","orderSummary","setOrderSummary","setCurrentInterface","setOrder","callSummary","setCallSummary","serviceRequests","callDuration","callDetails","emailSentForCurrentSession","setEmailSentForCurrentSession","addActiveOrder","translateToVietnamese","language","useAssistant","groupedRequests","setGroupedRequests","useState","note","setNote","handleInputChange","field","value","useEffect","grouped","acc","request","type","newItems","index","quantity","details","quantityMatch","price","sum","item","content","detectedRoomNumber","requestsMatch","requestsSection","requestRegex","id","requestType","requestIndex","endIndex","detailsSection","detailsRegex","key","description","serviceTypes","roomNumber","timingMatch","timing","deliveryTime","handleConfirmOrder","orderReference","estimatedDisplayTime","_a","summaryForEmail","e","formattedDuration","generatedCallId","currentCallId","emailPayload","isMobile","endpoint","requestUrl","response","result","innerError","error","handleAddNote","jsx","jsxs","t","line","idx","cleaned"],"mappings":"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"}